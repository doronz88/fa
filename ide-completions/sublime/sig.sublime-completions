{
    "scope": "source.hjson meta.structure.dictionary.hjson meta.structure.key-value.hjson meta.structure.array.hjson",
    "completions": [
        {
            "trigger": "add",
            "kind": "snippet",
            "contents": "add ${1:value}"
        },
        {
            "trigger": "add-offset-range",
            "kind": "snippet",
            "contents": "add-offset-range ${1:start} ${2:end} ${3:step}"
        },
        {
            "trigger": "align",
            "kind": "snippet",
            "contents": "align ${1:value}"
        },
        {
            "trigger": "argument",
            "kind": "snippet",
            "contents": "argument ${1:arg}"
        },
        {
            "trigger": "b",
            "kind": "snippet",
            "contents": "b ${1:label}"
        },
        {
            "trigger": "clear",
            "kind": "snippet",
            "contents": "clear "
        },
        {
            "trigger": "deref-data",
            "kind": "snippet",
            "contents": "deref-data ${1:-l} ${2:LEN}"
        },
        {
            "trigger": "find",
            "kind": "snippet",
            "contents": "find ${1:name}"
        },
        {
            "trigger": "find-bytes",
            "kind": "snippet",
            "contents": "find-bytes ${1:hex_str}"
        },
        {
            "trigger": "find-bytes-ida",
            "kind": "snippet",
            "contents": "find-bytes-ida ${1:expression}"
        },
        {
            "trigger": "find-immediate",
            "kind": "snippet",
            "contents": "find-immediate ${1:expression}"
        },
        {
            "trigger": "find-str",
            "kind": "snippet",
            "contents": "find-str --null-terminated ${1:hex_str}"
        },
        {
            "trigger": "function-end",
            "kind": "snippet",
            "contents": "function-end "
        },
        {
            "trigger": "function-lines",
            "kind": "snippet",
            "contents": "function-lines --after | --before"
        },
        {
            "trigger": "function-start",
            "kind": "snippet",
            "contents": "function-start ${1:cmd} ..."
        },
        {
            "trigger": "goto-ref",
            "kind": "snippet",
            "contents": "goto-ref --code --data"
        },
        {
            "trigger": "if",
            "kind": "snippet",
            "contents": "if ${1:cond} ${2:label}"
        },
        {
            "trigger": "if-not",
            "kind": "snippet",
            "contents": "if-not ${1:cond} ${2:label}"
        },
        {
            "trigger": "intersect",
            "kind": "snippet",
            "contents": "intersect --piped ${1:variables} ${2:variables} ..."
        },
        {
            "trigger": "keystone-find-opcodes",
            "kind": "snippet",
            "contents": "keystone-find-opcodes --bele --or ${1:arch} ${2:mode} ${3:code}"
        },
        {
            "trigger": "keystone-verify-opcodes",
            "kind": "snippet",
            "contents": "keystone-verify-opcodes --bele --until ${1:UNTIL} ${2:arch} ${3:mode} ${4:code}"
        },
        {
            "trigger": "load",
            "kind": "snippet",
            "contents": "load ${1:name}"
        },
        {
            "trigger": "locate",
            "kind": "snippet",
            "contents": "locate ${1:name} ${2:name} ..."
        },
        {
            "trigger": "make-code",
            "kind": "snippet",
            "contents": "make-code "
        },
        {
            "trigger": "make-comment",
            "kind": "snippet",
            "contents": "make-comment ${1:comment}"
        },
        {
            "trigger": "make-function",
            "kind": "snippet",
            "contents": "make-function "
        },
        {
            "trigger": "make-literal",
            "kind": "snippet",
            "contents": "make-literal "
        },
        {
            "trigger": "make-offset",
            "kind": "snippet",
            "contents": "make-offset ${1:-l} ${2:LEN}"
        },
        {
            "trigger": "make-unknown",
            "kind": "snippet",
            "contents": "make-unknown "
        },
        {
            "trigger": "max-xrefs",
            "kind": "snippet",
            "contents": "max-xrefs "
        },
        {
            "trigger": "min-xrefs",
            "kind": "snippet",
            "contents": "min-xrefs "
        },
        {
            "trigger": "most-common",
            "kind": "snippet",
            "contents": "most-common "
        },
        {
            "trigger": "next-instruction",
            "kind": "snippet",
            "contents": "next-instruction --limit ${1:LIMIT} --back --op0 ${2:OP0} --op1 ${3:OP1} --op2 ${4:OP2} --op3 ${5:OP3} --op4 ${6:OP4} --op5 ${7:OP5} ${8:mnem} ${9:mnem} ..."
        },
        {
            "trigger": "offset",
            "kind": "snippet",
            "contents": "offset ${1:offset}"
        },
        {
            "trigger": "operand",
            "kind": "snippet",
            "contents": "operand ${1:op}"
        },
        {
            "trigger": "print",
            "kind": "snippet",
            "contents": "print ${1:phrase}"
        },
        {
            "trigger": "python-if",
            "kind": "snippet",
            "contents": "python-if ${1:cond} ${2:label}"
        },
        {
            "trigger": "run",
            "kind": "snippet",
            "contents": "run ${1:name}"
        },
        {
            "trigger": "set-const",
            "kind": "snippet",
            "contents": "set-const ${1:name}"
        },
        {
            "trigger": "set-enum",
            "kind": "snippet",
            "contents": "set-enum ${1:enum_name} ${2:enum_key}"
        },
        {
            "trigger": "set-name",
            "kind": "snippet",
            "contents": "set-name ${1:name}"
        },
        {
            "trigger": "set-struct-member",
            "kind": "snippet",
            "contents": "set-struct-member ${1:struct_name} ${2:member_name} ${3:member_type}"
        },
        {
            "trigger": "set-type",
            "kind": "snippet",
            "contents": "set-type ${1:type_str}"
        },
        {
            "trigger": "single",
            "kind": "snippet",
            "contents": "single ${1:index}"
        },
        {
            "trigger": "sort",
            "kind": "snippet",
            "contents": "sort "
        },
        {
            "trigger": "stop-if-empty",
            "kind": "snippet",
            "contents": "stop-if-empty "
        },
        {
            "trigger": "store",
            "kind": "snippet",
            "contents": "store ${1:name}"
        },
        {
            "trigger": "symdiff",
            "kind": "snippet",
            "contents": "symdiff ${1:variables} ${2:variables} ..."
        },
        {
            "trigger": "trace",
            "kind": "snippet",
            "contents": "trace "
        },
        {
            "trigger": "union",
            "kind": "snippet",
            "contents": "union --piped ${1:variables} ${2:variables} ..."
        },
        {
            "trigger": "unique",
            "kind": "snippet",
            "contents": "unique "
        },
        {
            "trigger": "verify-aligned",
            "kind": "snippet",
            "contents": "verify-aligned ${1:value}"
        },
        {
            "trigger": "verify-bytes",
            "kind": "snippet",
            "contents": "verify-bytes ${1:hex_str}"
        },
        {
            "trigger": "verify-name",
            "kind": "snippet",
            "contents": "verify-name ${1:name}"
        },
        {
            "trigger": "verify-opcode",
            "kind": "snippet",
            "contents": "verify-opcode --op0 ${1:OP0} --op1 ${2:OP1} --op2 ${3:OP2} --op3 ${4:OP3} --op4 ${5:OP4} --op5 ${6:OP5} ${7:mnem} ${8:mnem} ..."
        },
        {
            "trigger": "verify-operand",
            "kind": "snippet",
            "contents": "verify-operand --op0 ${1:OP0} --op1 ${2:OP1} --op2 ${3:OP2} ${4:name}"
        },
        {
            "trigger": "verify-ref",
            "kind": "snippet",
            "contents": "verify-ref --code --data --name ${1:NAME}"
        },
        {
            "trigger": "verify-segment",
            "kind": "snippet",
            "contents": "verify-segment --regex ${1:name}"
        },
        {
            "trigger": "verify-single",
            "kind": "snippet",
            "contents": "verify-single "
        },
        {
            "trigger": "verify-str",
            "kind": "snippet",
            "contents": "verify-str --null-terminated ${1:hex_str}"
        },
        {
            "trigger": "xref",
            "kind": "snippet",
            "contents": "xref "
        },
        {
            "trigger": "xrefs-to",
            "kind": "snippet",
            "contents": "xrefs-to --function-start --or --and --name ${1:NAME} --bytes ${2:BYTES}"
        }
    ]
}